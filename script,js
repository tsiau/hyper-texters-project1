function getAlternativePhrases(textWithCurseWord) {
    const apiKey = "3f810349b2msh015da3694eb525ap19c26cjsn9261a2574f5f"; // Replace with your actual API key
  
    // Replace this URL with the actual API endpoint provided by the Word Associations Network API
    const apiUrl = "https://rapidapi.com/twinword/api/word-associations";
  
    // Create the request data
    const requestData = {
      text: textWithCurseWord
    };
  
    // Make the API request
    return fetch(apiUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-API-Key": apiKey
      },
      body: JSON.stringify(requestData)
    })
    .then(response => {
      if (!response.ok) {
        throw new Error("Network response was not ok.");
      }
      return response.json();
    })
    .then(data => {
      // Extract the alternative phrases from the response data
      const alternatives = data.alternatives;
      return alternatives;
    })
    .catch(error => {
      console.error("Error fetching data:", error);
      return []; // Return an empty array as alternatives in case of an error
    });
  }

  // Replace YOUR_API_KEY with your actual API key or set up the appropriate authentication method
const apiKey = "1053081302185-o9ffkj1dq73nse9vbi680lfilpqd2rrf.apps.googleusercontent.com";

function transcribeSpeech(audioBlob) {
  const apiUrl = "https://speech.googleapis.com/v1/speech:recognize?key=" + apiKey;

  // Create the request data
  const requestData = {
    config: {
      encoding: "LINEAR16",
      sampleRateHertz: 16000,
      languageCode: "en-US",
    },
    audio: {
      content: audioBlob,
    },
  };

  // Make the API request
  return fetch(apiUrl, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(requestData),
  })
  .then(response => {
    if (!response.ok) {
      throw new Error("Network response was not ok.");
    }
    return response.json();
  })
  .then(data => {
    // Process the response data (transcription)
    const transcription = data.results[0].alternatives[0].transcript;
    return transcription;
  })
  .catch(error => {
    console.error("Error fetching data:", error);
    return ""; // Return an empty string in case of an error
  });
}
// Initialize the website and user interface
document.addEventListener("DOMContentLoaded", () => {
  const landingPage = document.getElementById("landing-page");
  const enterRoomBtn = document.getElementById("enter-room-btn");
  const chatRoom = document.getElementById("chat-room");

  enterRoomBtn.addEventListener("click", () => {
    landingPage.style.display = "none";
    chatRoom.style.display = "block";

    // Call functions to initialize the voice chat room
    initializeVoiceChatRoom();
    initializeSpeechToText();
  });
});

// Mock list of curse words for demonstration purposes
const curseWords = ["curse1", "curse2", "curse3"];

function initializeVoiceChatRoom() {
  // Code to create the voice chat room interface and display participants' profile pictures
  // You can use libraries like Socket.IO for real-time communication between participants
}

function initializeSpeechToText() {
  // Code to set up the speech recognition module to listen to the microphone input of the user
  // Use the Google Cloud Speech-to-Text API to convert spoken words into text
  // When speech is detected, highlight the profile picture of the speaker in green
  // and add a ring light effect behind the profile picture to emphasize that the person is speaking

  // For demonstration purposes, we will mock the detected text
  const detectedText = "This is a curse1 word. Please don't use curse2 words.";

  // Check if the detected text contains any curse words
  const containsCurseWord = curseWords.some((curseWord) =>
    detectedText.toLowerCase().includes(curseWord)
  );

  // Identify the speaker (you would need to implement this logic in your app)
  const speakerId = 1; // Assuming the speaker is the first participant

  // Highlight the profile picture of the speaker
  const profilePicture = document.getElementById(`profile-${speakerId}`);
  profilePicture.classList.add("active");

  // If the detected text contains a curse word, add the cursing class to the profile picture
  if (containsCurseWord) {
    profilePicture.classList.add("cursing");
  }
}
  
// Add event listeners and functions to handle the user interactions and API calls.
